{"version":3,"sources":["App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["App","useState","diffTime","setDiffTime","console","log","useEffect","setInterval","diff","moment","duration","getDiff","renderTime","useCallback","label","key","val","years","months","days","hours","minutes","seconds","map","data","className","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.79c645db.chunk.js","sourcesContent":["import React, { useState, useEffect, useCallback } from 'react'\nimport moment from 'moment'\nconst App = () => {\n  const [diffTime, setDiffTime] = useState(null)\n\n  const getDiff = () => {\n    const eventTime = moment([2021, 6, 16])\n    const currentTime = moment()\n    const diff = eventTime - currentTime\n    const duration = moment.duration(diff)\n    setDiffTime(moment.duration(duration))\n  }\n\n  console.log(`diffTime`, diffTime)\n  useEffect(() => {\n    setInterval(() => {\n      getDiff()\n    }, 1000)\n  }, [])\n\n  const renderTime = useCallback(() => {\n    const items = [\n      { label: '‡∏õ‡∏µ', key: 'years', val: diffTime?.years() || 0 },\n      { label: '‡πÄ‡∏î‡∏∑‡∏≠‡∏ô', key: 'months', val: diffTime?.months() || 0 },\n      { label: '‡∏ß‡∏±‡∏ô', key: 'days', val: diffTime?.days() || 0 },\n      { label: '‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á', key: 'hours', val: diffTime?.hours() || 0 },\n      { label: '‡∏ô‡∏≤‡∏ó‡∏µ', key: 'minutes', val: diffTime?.minutes() || 0 },\n      { label: '‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ', key: 'seconds', val: diffTime?.seconds() || 0 },\n    ]\n    return items.map((data) => {\n      return (\n        <div className='timer' key={data.key}>\n          <div className='value'>{data.val}</div>\n          <div className='label'>{data.label}</div>\n        </div>\n      )\n    })\n  }, [diffTime])\n\n  return (\n    <div className='container'>\n      <div className='text top'>‡∏≠‡∏µ‡∏Å</div>\n      <div className='timer__container'>{renderTime()}</div>\n      <div className='text'><span>‡πÄ‡∏û‡∏µ‡∏¢‡∏ß</span>‡∏Å‡πá‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏£‡πà‡πÅ‡∏•‡πâ‡∏ß<br/>‡πÄ‡∏¢‡πâ üéâ ‡∏î‡∏µ‡πÉ‡∏à‡πÅ‡∏°‡∏∞5555 </div>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\nimport './style.scss'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}